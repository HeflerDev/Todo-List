/* eslint-disable */

!function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var o={createTaskObj:(t,e,n,o)=>({name:t,content:e,difficulty:n,date:o,status:!1,todos:[]}),validateProjectInput:t=>/^[a-zA-Z]/g.test(t),validateTodoInput:t=>/^[a-zA-Z]/.test(t),validateTaskInput:t=>{const e=[];return/^[a-zA-Z]/.test(t.name)||e.push("Task name must start with an letter"),t.content||e.push("Task content must exist"),Date.parse(t.date)||e.push("Invalid Date input"),e.length>0?e:"true"},convertToValidId:t=>t.replace(/\s/g,"-")};var a=(()=>{const t=(t,e,n=null,a="div")=>{const c=document.createElement(a);return t&&(c.id=o.convertToValidId(t)),e=o.convertToValidId(e),n&&(Array.isArray(n)?n.forEach(t=>{c.classList.add(t)}):c.classList.add(n)),document.getElementById(e).appendChild(c),c};return{container:t,closeTabBtn:e=>{t("close-btn-container",e,"flex-grid"),t(null,"close-btn-container","col-10");const n=t(null,"close-btn-container",["col-2","close-button"],"button");return n.textContent="X",n}}})();var c={newProjectForm:()=>{a.container("project-form-container","new-project-btn-container",["box","col-12"],"div"),a.container("project-form","project-form-container",["flex-grid"],"form"),a.container("p","project-form",["col-12"],"label").textContent="Project Name",a.container("project-name","project-form",["col-12"],"input");const t=a.container("project-submit-btn","project-form",["col-12","btn-primary"]);return t.textContent="Create Project!",t},newTaskForm:t=>{a.container("task-form-container",t,["box"]),a.container("task-form-warning-container","task-form-container"),a.container("task-form","task-form-container","flex-grid","form"),a.container("name-label","task-form",["col-12"],"label").textContent="Name",a.container("name-input","task-form",["col-12"],"input"),document.getElementById("task-form").appendChild(document.createElement("br")),a.container("content-label","task-form",["col-12"],"label").textContent="Content",a.container("content-input","task-form",["col-12"],"textarea"),document.getElementById("task-form").appendChild(document.createElement("br")),a.container("difficulty-label","task-form",["col-12"],"label").textContent="Difficulty",a.container("difficulty-select","task-form",["col-12"],"select");const e=a.container("difficulty-option-1","difficulty-select",null,"option");e.textContent="Easy",e.value="Easy";const n=a.container("difficulty-option-2","difficulty-select",null,"option");n.textContent="Medium",n.value="Medium";const o=a.container("difficulty-option-3","difficulty-select",null,"option");o.textContent="Hard",o.value="Hard",a.container("date-label","task-form",null,"label"),a.container("date-input","task-form",["col-6"],"input").type="date";const c=a.container("task-submit","task-form",["col-6","submit-btn"],"div");return c.textContent="Submit",c},newTodoForm:(t,e)=>{a.container("todo-form-container",`task-${t}-${e}-todo-button-container`,["flex-grid"],"form"),a.container("todo-form-label","todo-form-container",null,"label"),a.container("todo-form-input","todo-form-container",null,"input");const n=a.container("todo-form-submit","todo-form-container",null,"input");return n.value="Create Todo",n.type="submit",n}};var r={renderWarningProjectMessage:t=>{a.container(t,"project-form-container",["col-12","warning-messag"]).texContent=t},renderProject:t=>{a.container("project-"+t,"content-section",["box","whole-project-container"]),a.container(`project-${t}-container`,"project-"+t,["flex-grid","project-container"]),a.container(`project-${t}-name`,`project-${t}-container`,["col-12","col-m-10"]),a.container(t,`project-${t}-name`,["minibox","center"],"h2").textContent=t;const e=a.container(`project-${t}-button`,`project-${t}-container`,["col-2","minibox","no-margin","new-task-btn"],"button");return a.container(null,`project-${t}-button`,["minibox"]).textContent="Add New Task",e},renderCheckedTodo:(t,e,n)=>{const o=`task-${t}-${e}-${n}`;a.container(o+"-todo",`task-${t}-${e}-todo-container`,["flex-grid","completed-todo"]),a.container(o+"-todo-container-complete-button-container",o+"-todo","col-1");const c=a.container(o+"-todo-container-button",o+"-todo-container-complete-button-container","complete-btn","button"),[r]=JSON.parse(n);return a.container(`todo-${t}-${e}-${n}-todo-container-description`,`task-${t}-${e}-${n}-todo`,"col-10").textContent=r,{checkBtn:c}},renderTask:(t,e)=>{const n=`task-${t}-${e.name}`;a.container(""+n,"project-"+t,["task-container"]),a.container(n+"-container",`task-${t}-${e.name}`,["flex-grid"]),a.container(n+"-complete-task-container",n+"-container",["col-1","minibox","no-bounds"]);const o=a.container(n+"-complete-task-btn",n+"-complete-task-container",["complete-btn","minibox"],"button"),c=a.container("{idString}-content-task-name",n+"-container",["col-10","minibox","no-bounds","task-name"]);c.textContent=e.name,a.container(n+"-todo-button-container",n+"-container",["col-1","minibox","end","no-bounds"]);const r=a.container(n+"-todo-button",n+"-todo-button-container",["no-bounds","btn-todo"]);return r.textContent="+ Todo",a.container(null,n+"-container","col-1"),a.container(n+"-todo-container",n+"-container","col-11"),{todoBtn:r,nameBtn:c,completeBtn:o}},newProjectBtn:()=>{a.container("new-project-btn-container","content-section",["flex-grid","center"]);const t=a.container("new-project-btn","new-project-btn-container",["new-project-btn"],"button");return t.textContent="+",t},renderTodo:(t,e,n)=>{const o=`task-${t}-${e}-${n}`;a.container(o+"-todo",`task-${t}-${e}-todo-container`,["flex-grid","todo-container"]),a.container(o+"-todo-container-complete-button-container",o+"-todo","col-1");const c=a.container(o+"-todo-container-button",o+"-todo-container-complete-button-container","complete-btn","button"),[r]=JSON.parse(n);a.container(`todo-${t}-${e}-${n}-todo-container-description`,`task-${t}-${e}-${n}-todo`,"col-10").textContent=r,a.container(o+"-todo-container-delete-button-container",o+"-todo","col-1");const i=a.container(o+"-todo-container-delete-button",o+"-todo-container-delete-button-container","soft-button");return i.textContent="X",{checkBtn:c,deleteBtn:i}},noProjectWarning:()=>{const t=a.container("no-project-warning","content-section",["no-project-warning"]);return t.textContent='Nothing to display here. Press "+" to create a new project',t},renderWarningMessage:t=>{a.container(t,"task-form-warning-container",["col-12","warning-message"]).textContent=t},renderTaskInfo:(t,e)=>{const n=`task-info-${t}-${e.name}`,o=`task-${t}-${e.name}`;a.container("task-info-container",""+o,["box","info"]);const c=a.closeTabBtn("task-info-container");a.container(null,"task-info-container","task-description","p").textContent=e.content,a.container(n+"-difficulty-container","task-info-container");const r=a.container(n+"-difficulty",n+"-difficulty-container");r.textContent=e.difficulty,a.container(n+"-date-container","task-info-container");const i=a.container(n+"-date",n+"-date-container");i.textContent=e.date,a.container(n+"-btn-container","task-info-container",["flex-grid"]);const s=a.container(n+"-btn-edit",n+"-btn-container",["col-6","btn-edit"],"button");s.textContent="Edit";const l=a.container(n+"-btn-delete",n+"-btn-container",["col-6","btn-danger"],"button");return l.textContent="Delete",{closeBtn:c,editBtn:s,deleteBtn:l,difficultyInfo:r,dateInfo:i}}};const i=(()=>{const t=(t,e)=>{const n=localStorage.getItem(t);let o=-1;return JSON.parse(n).forEach((t,n)=>{const a=JSON.parse(t);e===a.name&&(o=n)}),o},e=(e,n)=>{const o=JSON.parse(localStorage.getItem(e));return JSON.parse(o[t(e,n)])},n=(e,n)=>{const o=JSON.parse(localStorage.getItem(e));o.splice(t(e,n),1),localStorage.removeItem(e),localStorage.setItem(e,JSON.stringify(o))},o=(t,e)=>{const n=JSON.parse(localStorage.getItem(t));localStorage.removeItem(t),n.unshift(JSON.stringify(e)),localStorage.setItem(t,JSON.stringify(n))},a=(t,e,n)=>{const o=i.findDataIndexByKey(t,e),a=JSON.parse(localStorage.getItem(t)),c=JSON.parse(a[o]);let r=-1;return c.todos.forEach((t,e)=>{JSON.parse(t)[0]===n&&(r=e)}),r},c=(t,n)=>{const o=e(t,n);return Date.parse(o.date)<Date.now()};return{addNewTaskToProject:o,addNewTodoToTask:(e,a,c)=>{const r=t(e,a.name);if(-1!==r){const t=JSON.parse(localStorage.getItem(e)),i=JSON.parse(t[r]);i.todos.push(JSON.stringify([c,!1])),n(e,a.name),o(e,i)}},createNewProject:t=>{localStorage.setItem(t,JSON.stringify([]))},removeTaskFromProject:n,removeTodoFromTask:(t,c,r)=>{const i=e(t,c);i.todos.splice(a(t,c,r),1),n(t,c),o(t,i)},findDataIndexByKey:t,getTodoIndex:a,checkIfTodoIsCompleted:(t,e,n)=>{const o=i.findDataIndexByKey(t,e),c=JSON.parse(localStorage.getItem(t)),r=JSON.parse(c[o]).todos[a(t,e,n)];return JSON.parse(r)[1]},changeTodoState:(t,e,a)=>{const c=JSON.parse(localStorage.getItem(t)),r=JSON.parse(c[i.findDataIndexByKey(t,e)]);let s=r.todos.splice(i.getTodoIndex(t,e,a),1);s=JSON.parse(s),!1===s[1]?s[1]=!0:s[1]=!1,r.todos.push(JSON.stringify(s)),n(t,e),o(t,r)},changeTaskState:(e,a)=>{const c=JSON.parse(localStorage.getItem(e)),r=JSON.parse(c[t(e,a)]);r.status?r.status=!1:r.status=!0,n(e,a),o(e,r)},checkForProjectExistence:()=>localStorage.length>0,retrieveTaskData:e,gatherStorageData:()=>{let t=0,e=0,n=0,o=0;return Object.keys(localStorage).forEach(a=>{JSON.parse(localStorage.getItem(a)).forEach(r=>{const i=JSON.parse(r);!0===i.status?t+=1:e+=1,c(a,i.name)?!1===i.status&&(o+=1):n+=1})}),{completed:t.toString(),uncompleted:e.toString(),onTime:n.toString(),lateTime:o.toString()}},checkIfDateIsLate:c,gatherCompletedTasksNames:()=>{const t=[];return Object.keys(localStorage).forEach(e=>{JSON.parse(localStorage.getItem(e)).forEach(e=>{const n=JSON.parse(e);!0===n.status&&t.push(n.name)})}),t.length>0?t:["There isn't any completed tasks"]}}})();var s=i;var l=(()=>{const t=(t,e,n)=>{const a=JSON.parse(e),i=document.getElementById("task-info-container");i&&i.remove();const l=r.renderTaskInfo(t,a);l.editBtn.addEventListener("click",()=>{if(document.getElementById("task-info-container").remove(),!document.getElementById("task-form-container")){const e=c.newTaskForm(t);(t=>{document.getElementById("name-input").value=t.name,document.getElementById("content-input").value=t.content,document.getElementById("difficulty-select").value=t.difficulty,document.getElementById("date-input").value=t.date})(a),e.addEventListener("click",()=>{const e=(()=>{const t=document.getElementById("name-input").value,e=document.getElementById("content-input").value,n=document.getElementById("difficulty-select").value,a=document.getElementById("date-input").value;return o.createTaskObj(t,e,n,a)})();e.todos=a.todos;const c=o.validateTaskInput(e);Array.isArray(c)||(s.removeTaskFromProject(t,a),s.addNewTaskToProject(t,e),n())})}}),l.closeBtn.addEventListener("click",()=>{document.getElementById("task-info-container").remove()}),l.deleteBtn.addEventListener("click",()=>{s.removeTaskFromProject(t,a),n()}),s.checkIfDateIsLate(t,a.name)&&(l.dateInfo.classList.add("date-field-warning"),l.dateInfo.title="Task is Late",l.dateInfo.textContent=a.date+" - Task is Late"),"Easy"===l.difficultyInfo.textContent?l.difficultyInfo.classList.add("easy-container"):"Medium"===l.difficultyInfo.textContent?l.difficultyInfo.classList.add("medium-container"):l.difficultyInfo.classList.add("hard-container")},e=()=>{document.getElementById("new-project-btn")||r.newProjectBtn().addEventListener("click",()=>{c.newProjectForm().addEventListener("click",()=>{const t=document.getElementById("project-name").value;if(o.validateProjectInput(t))s.createNewProject(t),document.getElementById("project-form-container").remove(),document.getElementById("Invalid Project Name")&&document.getElementById("Invalid Project Name").remove(),e();else{const t="Invalid Project Name";document.getElementById(t)||r.renderWarningProjectMessage(t)}})}),Object.keys(localStorage).forEach(n=>{document.getElementById("project-"+o.convertToValidId(n))&&document.getElementById("project-"+o.convertToValidId(n)).remove(),r.renderProject(n).addEventListener("click",()=>{c.newTaskForm(n).addEventListener("click",()=>{(t=>{const e=document.getElementById("name-input").value,n=document.getElementById("content-input").value,a=document.getElementById("difficulty-select").value,c=document.getElementById("date-input").value,i=o.createTaskObj(e,n,a,c),l=o.validateTaskInput(i);if(Array.isArray(l)){if(document.getElementsByClassName("warning-message")){Array.from(document.getElementsByClassName("warning-message")).forEach(t=>{t.remove()})}return l.forEach(t=>r.renderWarningMessage(t)),!1}return s.addNewTaskToProject(t,i),document.getElementById("task-form-container").remove(),!0})(n)&&e()})}),JSON.parse(localStorage.getItem(n)).forEach(a=>{const i=JSON.parse(a);if(!i.status){const l=r.renderTask(n,i);l.completeBtn.addEventListener("click",()=>{((t,e)=>{s.changeTaskState(t,e)})(n,i.name),e()}),l.todoBtn.addEventListener("click",()=>{c.newTodoForm(n,i.name).addEventListener("click",()=>{const t=document.getElementById("todo-form-input").value;o.validateTodoInput(t)&&s.addNewTodoToTask(n,i,t)})}),i.todos.length>0&&i.todos.forEach(t=>{const[o]=JSON.parse(t);if(s.checkIfTodoIsCompleted(n,JSON.parse(a).name,o)){const o=r.renderCheckedTodo(n,i.name,t);o.checkBtn.addEventListener("click",()=>{s.changeTodoState(n,i.name,JSON.parse(t)[0]),e()}),o.checkBtn.classList.remove("complete-btn"),o.checkBtn.classList.add("uncomplete-btn"),o.checkBtn.parentElement.classList.add("completed-todo")}else{const o=r.renderTodo(n,i.name,t),[a]=JSON.parse(t);o.checkBtn.addEventListener("click",()=>{((t,e,n)=>{s.changeTodoState(t,e,n)})(n,i.name,a),e()}),o.deleteBtn.addEventListener("click",()=>{((t,e,n)=>{s.removeTodoFromTask(t,e,n)})(n,i.name,a),e()})}}),l.nameBtn.addEventListener("click",()=>{t(n,a,e)})}})})},n=()=>{document.getElementById("new-project-btn")&&document.getElementById("new-project-btn").remove(),Object.keys(localStorage).forEach(t=>{document.getElementById("project-"+o.convertToValidId(t))&&document.getElementById("project-"+o.convertToValidId(t)).remove(),r.renderProject(t).remove(),JSON.parse(localStorage.getItem(t)).forEach(e=>{const o=JSON.parse(e);if(o.status){const e=r.renderTask(t,o);e.completeBtn.classList.remove("complete-btn"),e.completeBtn.classList.add("completed-btn"),e.completeBtn.addEventListener("click",()=>{s.changeTaskState(t,o.name),n()}),e.todoBtn.disabled=!0}})})};return e(),s.checkForProjectExistence()||r.noProjectWarning(),{displayTabContent:e,displayTabCompletedContent:n}})();var d={renderData:(t,e,n,o)=>{a.container("statistics-container","left-section","box");const c=a.container("statistics-completing-completed","statistics-container",["flex-grid","info-container"]);a.container(null,"statistics-completing-completed",["col-1","fa","fa-check","icon-good"]),a.container("statistics-completed-label","statistics-completing-completed",["col-9","side-info"]).textContent="Tasks Completed",a.container("statistics-completed-data","statistics-completing-completed","col-2").textContent=": "+t;const r=a.container("statistics-completing-uncompleted","statistics-container",["flex-grid","info-container"]);a.container(null,"statistics-completing-uncompleted",["col-1","fa","fa-times","icon-bad"]),a.container("statistics-uncompleted-label","statistics-completing-uncompleted",["col-9","side-info"]).textContent="Tasks Uncompleted",a.container("statistics-uncompleted-data","statistics-completing-uncompleted","col-2").textContent=": "+e;const i=a.container("statistics-completing-ontime","statistics-container",["flex-grid","info-container"]);a.container(null,"statistics-completing-ontime",["col-1","fa","fa-clock-o","icon-good"]),a.container("statistics-ontime-label","statistics-completing-ontime",["col-9","side-info"]).textContent="Tasks on Time",a.container("statistics-ontime-data","statistics-completing-ontime","col-2").textContent=": "+n;const s=a.container("statistics-completing-late","statistics-container",["flex-grid","info-container"]);return a.container(null,"statistics-completing-late",["col-1","fa","fa-bullhorn","icon-bad"]),a.container("statistics-lateTime-label","statistics-completing-late",["col-9","side-info"]).textContent="Late Tasks",a.container("statistics-lateTime-data","statistics-completing-late","col-2").textContent=": "+o,{completed:c,uncompleted:r,onTime:i,late:s}},displayInfo:t=>{a.container("info-"+t,"statistics-completing-completed","minibox").textContent=" - "+t}};(()=>{const t=s.gatherStorageData(),e=d.renderData(t.completed,t.uncompleted,t.onTime,t.lateTime);e.completed.addEventListener("click",()=>{s.gatherCompletedTasksNames().forEach(t=>{document.getElementById("info-"+t)||d.displayInfo(t)})}),e.uncompleted.addEventListener("click",()=>{})})(),document.getElementById("todo-tab-btn").addEventListener("click",()=>{l.displayTabContent()}),document.getElementById("todo-tab-btn-completed").addEventListener("click",()=>{l.displayTabCompletedContent()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
